# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KHCiAc8cdMAMaCQP0Wrn9GdOn9Edtb-3
"""

###########################################  Yossef Nada #################################################################
# First importing libraries of use 

import os
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly 
import plotly.express as px

# We will import the data set itself
Imported_data_set=pd.read_csv("train.csv")
# Show the head of the data set 
Imported_data_set.head(10)

Imported_data_set.info() # just to get an overview of the entire data set , and see the missing data

# To get the correlation of the data set to understand the relationship between different parameters
Imported_data_set.corr()

Imported_data_set.isnull().sum() # To get the number of Nulls in each column

# We will just sort the data ascendingly
total = Imported_data_set.isnull().sum().sort_values(ascending=False)
percent_1 = Imported_data_set.isnull().sum()/Imported_data_set.isnull().count()*100
percent_2 = (round(percent_1, 1)).sort_values(ascending=False)
missing_data = pd.concat([total, percent_2], axis=1, keys=['Total', '%'])
missing_data.head(10)

#################################################################3
# Here we can see that the cabins coloumn is missing more than 77 percent of it's data which means that it might not be of great use to us in this analysis 
# Yet through the 'tickets' number and 'pclass' we can find a relation between the cabins and the people staying in them 
# The Age coloumn has 177 missing data which will be further assumed by the mean of the age values

Imported_data_set.describe() # just an intial description to get a whole view

## Check Duplication 
Imported_data_set.duplicated()

# The is no duplication in rows

# We are going to take the mean of the ages of people and then put that average in the missing data
Imported_data_set.Age=Imported_data_set.Age.fillna(Imported_data_set.Age.median())

Imported_data_set.info() # Here We see that the Age is now full of data

# Here we see that Tickets are not unique which means there are duplicate tickets this might lead to getting a realtionship between the 
# Pclass and the lost cabins, similar tickets boarded from the same spot, presumably are from the same class of people and then we might link it to those who
# who survived or not 
Imported_data_set.nunique()

Imported_data_set.dropna(subset=['Embarked'],inplace=True) # remove the rows where we don't know their 'Embarked' details 
# Although we might have linked it with the similarity between tickets or fares as we assumed above

Imported_data_set.info() # just to get an overview of the entire data set 
# we see that 2 rows have been dropped

Imported_data_set.isnull().sum() # To get the number of Nulls in each column

Imported_data_set.isnull().sum() # To get the number of Nulls in each column

Imported_data_set.info() # just to get an overview of the entire data set

Imported_data_set.corr() # Correlation again after tidying up the data set

# Visualizations #

###########################################################
############## Age, Sex and survival ######################
###########################################################

# We will plot a graph between those who survived and those didnot based on their age differences 
g = sns.FacetGrid(Imported_data_set, col='Survived')
g.map(plt.hist, 'Age', bins=20)
# from the following graph , young people from age 20 to 30 have very low chances of survival comapred to kids and old people

# Discussing males and females with those who survived and those who didnot 
# and then we will group them all in one graph 
sns.catplot(x ="Sex", hue ="Survived",
kind ="count", data = Imported_data_set)
# the percentage of males who survived are much less than who didnot when comparing to female percentage, this shows that females had much higher
# rates of survival and higher chances in getting on a life boat

# Here we will discuss the Age and Sex comparison with those who survived or not 

survived = 'survived'
not_survived = 'not survived'
fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10, 4))
women = Imported_data_set[Imported_data_set['Sex']=='female']
men = Imported_data_set[Imported_data_set['Sex']=='male']
ax = sns.distplot(women[women['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[0], kde =False)  # Kernel Density Estimation (KDE) is a way to estimate the probability density function of a continuous random variable we will set it to false for now
ax = sns.distplot(women[women['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[0], kde =False)
ax.legend()
ax.set_title('Female')
ax = sns.distplot(men[men['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[1], kde = False)
ax = sns.distplot(men[men['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[1], kde = False)
ax.legend()
_ = ax.set_title('Male')
# You can see that men have a high probability of no survival when they are between 18 and 30 years old,
# the exact opposite is for women.
# For women the survival chances are higher between 14 and 40.
# For men the probability of survival is very low between the age of 5 and 18, but that isnâ€™t true for women. 
# Another thing to note is that infants also have a little bit higher probability of survival.
# Since there seem to be certain ages, which have increased odds of survival.

###########################################################
############## Pclass,Fare and survival ###################
###########################################################

# Here we will discuss the classes of the people separatley with those who survived
# we found that class 1 (presumably the wealthiest)are the most people who survived --> Shows patriarchy
sns.barplot(x='Pclass', y='Survived', data=Imported_data_set)

# We assumed that pclass is the top class because they paid for the most expensive tickets 
# while class 3 paid for the cheapest tickets
# class 2 was the middle class, there fares was in between

# We can also add a heat map of those who survived with discriptive numbers

# Group the dataset by Pclass and Survived and then unstack them
group = Imported_data_set.groupby(['Pclass', 'Survived'])
pclass_survived = group.size().unstack()
 
# Heatmap - Color encoded 2D representation of data.
sns.heatmap(pclass_survived, annot = True, fmt ="d")

grid = sns.FacetGrid(Imported_data_set, col='Survived', row='Pclass', size=2.2, aspect=1.6)
grid.map(plt.hist, 'Age', alpha=.5, bins=20)
grid.add_legend();
#The plot below confirms our assumption about pclass 1, but we can also spot a high probability that a person in pclass 3 will not survive.

# Graphs between Fare and pclass with colors showing those who survived and those who didnot 
sns.stripplot(x="Pclass",y="Fare",data=Imported_data_set,hue="Survived")

# From this we see that the pclass those who paid for the highest tickets mostly survived
# but those in class 3, who paid for the cheapest tickets mostly died
# this was probably because of the placement of the cabins in the ships 
# Class 3 people were situated in the bottom layer which was probably flooded first

# Another graph to show those who paid the higher fares are the ones who mostly survived and to show the patriarchy in the ship 
 
#Divide Fare into 4 bins
Imported_data_set['Fare_Range'] = pd.qcut(Imported_data_set['Fare'], 4)
 
# Barplot - Shows approximate values based
# on the height of bars.
sns.barplot(x ='Fare_Range', y ='Survived',
data = Imported_data_set)

###########################################################
############## Sex, Pclass and 'Emabrked' #################
###########################################################

# Countplot
sns.catplot(x ='Embarked', hue ='Survived',
kind ='count', col ='Pclass', data = Imported_data_set)
# The following graph shows where the majority of each class boarded the ship which might give us a broad look on the relationship between the place of boarding the ship , fares and tickets

# Here we will discuss the "Embarked" and "Sex" and "Pclass"

FacetGrid = sns.FacetGrid(Imported_data_set, row='Embarked', size=4.5, aspect=1.6)
FacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette=None,  order=None, hue_order=None )
FacetGrid.add_legend()


# From the following graphs we see the difference between males and females those who survived and who not and also based on where they boarded the ship

###########################################################
############## sibsp ,Parch and survival ##################
###########################################################

#SibSp and Parch would make more sense as a combined feature, that shows the total number of relatives, 
# A person has on the Titanic. I will create it below and also a feature that shows if someone is not alone.
test_df = pd.read_csv("test.csv")
data = [Imported_data_set, test_df]
for dataset in data:
    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']
    dataset.loc[dataset['relatives'] > 0, 'not_alone'] = 0
    dataset.loc[dataset['relatives'] == 0, 'not_alone'] = 1
    dataset['not_alone'] = dataset['not_alone'].astype(int)
Imported_data_set['not_alone'].value_counts()

axes = sns.factorplot('relatives','Survived', 
                      data=Imported_data_set, aspect = 2.5, )


#Here we can see that you had a high probabilty of survival with 1 to 3 realitves,
# but a lower one if you had less than 1 or more than 3 (except for some cases with 6 relatives)